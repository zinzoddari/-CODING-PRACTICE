연결 요소의 개수
=============
[URL](https://www.acmicpc.net/problem/11724)

### 문제
방향 없는 그래프가 주어졌을 때, 연결 요소 (Connected Component)의 개수를 구하는 프로그램을 작성하시오.

### 입력
첫째 줄에 정점의 개수 N과 간선의 개수 M이 주어진다. (1 ≤ N ≤ 1,000, 0 ≤ M ≤ N×(N-1)/2) 둘째 줄부터 M개의 줄에 간선의 양 끝점 u와 v가 주어진다. (1 ≤ u, v ≤ N, u ≠ v) 같은 간선은 한 번만 주어진다.

### 출력
첫째 줄에 연결 요소의 개수를 출력한다.

### 예제 입력 1
```
6 5
1 2
2 5
5 1
3 4
4 6
```

### 예제 출력 1
```
2
```

### 예제 입력 2
```
6 8
1 2
2 5
5 1
3 4
4 6
5 4
2 4
2 3
```

### 예제 출력 2
```
1
```

### 풀이
```java
import java.io.*;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class Main {
    public static ArrayList<Integer>[] nodeArray;
    public static boolean[] visited;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        String input = br.readLine();

        StringTokenizer st = new StringTokenizer(input, " ");

        int node = Integer.parseInt((String) st.nextElement());
        int edge = Integer.parseInt((String) st.nextElement());

        int count = 0;

        nodeArray = new ArrayList[node];
        visited = new boolean[node];

        for (int i = 0; i < node; i++) {
            nodeArray[i] = new ArrayList<Integer>();
        }

        for (int i = 0; i < edge; i++) {
            input = br.readLine();
            st = new StringTokenizer(input, " ");

            int start = Integer.parseInt((String)st.nextElement())-1;
            int end = Integer.parseInt((String)st.nextElement())-1;

            nodeArray[start].add(end);
            nodeArray[end].add(start);
        }

        for (int i = 0; i < node; i++) {
            if(!visited[i]) {
                count++;
                DFS(i);
            }
        }

        System.out.println(count);
    }

    private static void DFS(int i) {
        if(visited[i]) return;
        visited[i] = true;

        for (int j : nodeArray[i]) {
            if (!visited[j]) {
                DFS(j);
            }
        }
    }
}
```

### 출처
- 문제를 만든 사람: baekjoon
- 데이터를 추가한 사람: djm03178, seoo2001, YunGoon
- 잘못된 조건을 찾은 사람: songjuh

### 알고리즘 분류 
- 그래프 이론
- 그래프 탐색
- 너비 우선 탐색
- 깊이 우선 탐색

### 메모
